import requests
import json

# Dictionary mapping job titles to relevant subreddits
SUBREDDITS = {
    "software engineer": ["cscareerquestions", "leetcode", "learnprogramming"],
    "data scientist": ["datascience", "MachineLearning", "analytics"],
    "finance analyst": ["finance", "FinancialCareers", "Accounting"],
    "mechanical engineer": ["engineering", "MechanicalEngineering"],
    "general": ["interviews", "jobs", "career_guidance"]
}

def get_subreddits(job_title):
    """Return a list of relevant subreddits based on the job title."""
    for key in SUBREDDITS:
        if key in job_title.lower():
            return SUBREDDITS[key]
    return ["interviews", "jobs"]  # Default subreddits if no specific match

def scrape_reddit_interview_questions(job_title):
    """Fetch top interview-related posts from relevant subreddits."""
    subreddits = get_subreddits(job_title)
    interview_questions = []
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    }

    for subreddit in subreddits:
        search_url = f"https://www.reddit.com/r/{subreddit}/search.json?q={job_title}+interview&restrict_sr=1"
        response = requests.get(search_url, headers=headers)
        
        if response.status_code != 200:
            print(f"Reddit request failed: {response.status_code}")
            continue
        
        data = response.json()
        posts = data.get("data", {}).get("children", [])

        for post in posts[:5]:  # Limit results to the top 5 posts
            interview_questions.append({
                "Subreddit": subreddit,
                "Question": post["data"].get("title", "No Title Found"),
                "Link": "https://www.reddit.com" + post["data"].get("permalink", "")
            })
    
    return interview_questions

def find_resources(job_title):
    """Retrieve relevant interview questions and useful career resources."""
    if not job_title:
        return {"error": "Missing required field (job_title)"}

    return {
        "interview_questions": scrape_reddit_interview_questions(job_title),
        "career_links": [
            {"Title": "Glassdoor Interview Questions", "URL": "https://www.glassdoor.com/Interview/index.htm"},
            {"Title": "LeetCode Practice Questions", "URL": "https://leetcode.com/"},
            {"Title": "Indeed Job Search", "URL": "https://www.indeed.com/"}
        ]
    }

# Example usage
if __name__ == "__main__":
    job_title = "Software Engineer"
    resources = find_resources(job_title)

    print("\nüîç Helpful discussions from Reddit:\n")
    for idx, question in enumerate(resources["interview_questions"], 1):
        print(f"{idx}. {question['Question']}\n   üîó {question['Link']}\n   üìå Subreddit: {question['Subreddit']}\n")

    print("\nüìö Useful Career Links:\n")
    for link in resources["career_links"]:
        print(f"üîó {link['Title']}: {link['URL']}")
